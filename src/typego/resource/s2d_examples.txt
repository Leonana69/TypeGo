# EXAMPLE 1
## NEW USER INSTRUCTION
Check if there is any person in the hallway, if so take a picture of him and report the message. Go back to the room after that.

Instruction History: [
	{"id": "1", "start": "12:07:38", "end": "12:09:43", "content": "Play with the person", "status": "success"},
	{"id": "2", "start": "12:09:51", "end": "N/A", "content": "Dance for me.", "status": "in_progress"}
]

## OBSERVATION
{
  "t": "16:09:13",
  "robot": {
    "posture": "standing"
  },
  "perception": [
    {
      "name": "chair",
      "bbox": [
		0.55,
		0.63,
		0.40,
		0.73
	  ],
      "dist": 2.82
    },
	{
	  "name": "table",
	  "bbox": [
		0.12,
		0.34,
		0.77,
		0.34
	  ],
	  "dist": 1.23
	},
	{
	  "name": "tv",
	  "bbox": [
		0.43,
		0.42,
		0.32,
		0.23
	  ],
	  "dist": 0.99
	}
  ],
  "nav": {
	"current_wp": 1,
    "waypoints": [
      {
        "id": 0,
        "label": "room"
      },
      {
        "id": 1,
        "label": "room"
      },
      {
        "id": 2,
        "label": "hallway"
      },
	  {
		"id": 3,
		"label": "hallway"
	  },
	  {
		"id": 4,
		"label": "hallway"
	  },
	  {
		"id": 7,
		"label": "hallway"
	  },
	  {
		"id": 8,
		"label": "hallway"
	  },
	  {
		"id": 12,
		"label": "hallway"
	  }
    ]
  }
}

## OUTPUT
A new instruction is received, so the in-progress task (2) will be stopped since the new instruction does not explicitly say the in-progress task should be resumed. The robot will start executing the new task.

The robot is currently at waypoint 1, labeled "room", and needs to search for any person in the hallway. There are no people in the immediate scene description, so the robot should navigate through the waypoints labeled "hallway" to look for a person. If a person is detected, the robot must stop, take a picture, and report the message. After that, or if no person is found at all, the robot should return to its original waypoint (1).

To implement this behavior, we define:
- `targets`: a list of hallway waypoints to visit.
- `start`: the robot’s current location (1).
- A state machine:
  - `GOTO_NEXT` to visit waypoints in sequence and update `next`.
  - `SEE_PERSON` as a global condition when a person is seen.
  - `RETURN_HOME` and `DONE` to wrap up the task.

```json
{
	"task": "stop(2);new()",
	"variables": {
		"targets": [2, 3, 4, 7, 8, 12],
		"start": 1,
		"index": 0,
		"next": 2
	},

	"global_trans": [
		"SEE_PERSON: see any person"
	],

	"states": {
		"GOTO_NEXT": {
			"action": "go to next",
			"update": {
		        "index": "index + 1",
		        "next": "targets[index] if index < len(targets) else None"
		    },
			"trans": [
				"RETURN_HOME: next is null"
			]
		},

		"SEE_PERSON": {
			"action": "take a picture, then report the message",
			"trans": ["RETURN_HOME: always"]
		},

		"RETURN_HOME": {
			"action": "go back to start",
			"trans": ["DONE: always"]
		}
	}
}
```

# EXAMPLE 2
## NEW USER INSTRUCTION
Play with the person for 3mins.

Instruction History: [
	{"id": "1", "start": "12:07:38", "end": "12:09:43", "content": "Play with the person", "status": "success"},
	{"id": "2", "start": "12:09:15", "end": "12:12:12", "content": "Go to the other side of the room and find a chair and take a picture of it.", "status": "success"}
]

## OBSERVATION
{
  "t": "16:10:23",
  "robot": {
	"posture": "standing"
  },
  "perception": [
	{
	  "name": "chair",
	  "bbox": [
		0.25,
		0.53,
		0.20,
		0.51
	  ],
	  "dist": 1.82
	},
	{
	  "name": "person",
	  "bbox": [
		0.29,
		0.52,
		0.11,
		0.22
	  ],
	  "dist": 0.62
	}
  ],
  "nav": {
	"current_wp": 1,
	"waypoints": [
	  {
		"id": 1,
		"label": "room"
	  },
	  {
		"id": 2,
		"label": "room"
	  },
	  {
		"id": 3,
		"label": "room"
	  },
	  {
		"id": 4,
		"label": "hallway"
	  },
	  {
		"id": 5,
		"label": "hallway"
	  },
	  {
		"id": 6,
		"label": "hallway"
	  }
	]
  }
}

## OUTPUT
A new instruction is received and there is no in-progress task, so the robot can immediately start executing the new task.

The user asked the robot to play with the person for 3 minutes. Based on the scene description, a person is detected nearby at a distance of only 0.62 meters. The robot does not need to search for the person—it can immediately engage.

The behavior plan involves:
- Starting in an `INIT` state and transitioning into `ENGAGE_PERSON`.
- In `ENGAGE_PERSON`, the robot walks to the person and says hello, and we optionally mark `person_found = true` for future extensibility.
- In `PLAY`, the robot plays with the person (dancing or following).
- After 3 minutes have passed, the robot transitions to `DONE`.

We assume the agent system can monitor elapsed time since task start to trigger the `"3mins past since the task started"` transition condition.

```json
{
	"task": "new()",
	"variables": {},
	"global_trans": [],

	"states": {
		"ENGAGE_PERSON": {
			"action": "walk to person, say hello",
			"trans": ["PLAY: always"]
		},

		"PLAY": {
			"action": "do a fun dance or follow the person",
			"trans": [
				"DONE: 3mins past since the task started"
			]
		}
	}
}
```

# EXAMPLE 3
## NEW USER INSTRUCTION
None

Instruction History: [
	{"id": "1", "start": "12:07:38", "end": "12:09:43", "content": "Play with the person", "status": "success"},
	{"id": "2", "start": "12:09:15", "end": "12:12:12", "content": "Go to the other side of the room and find a chair and take a picture of it.", "status": "success"},
	{"id": "3", "start": "13:12:34", "end": "13:14:46", "content": "Play with the person", "status": "paused"}
]

## OBSERVATION
{
  "t": "13:15:45",
  "robot": {
	"posture": "standing"
  },
  "perception": [
	{
	  "name": "chair",
	  "bbox": [
		0.25,
		0.53,
		0.20,
		0.51
	  ],
	  "dist": 1.82
	},
	{
	  "name": "person",
	  "bbox": [
		0.29,
		0.52,
		0.11,
		0.22
	  ],
	  "dist": 0.62
	}
  ],
  "nav": {
	"current_wp": 1,
	"waypoints": [
	  {
		"id": 1,
		"label": "room"
	  },
	  {
		"id": 2,
		"label": "room"
	  },
	  {
		"id": 3,
		"label": "room"
	  },
	  {
		"id": 4,
		"label": "hallway"
	  },
	  {
		"id": 5,
		"label": "hallway"
	  },
	  {
		"id": 6,
		"label": "hallway"
	  }
	]
  }
}

## OUTPUT
No new instruction is received, but there is a paused task (3) recently. The robot should resume this task.

```json
{
	"task": "continue(3)"
}
```