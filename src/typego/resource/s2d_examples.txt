# EXAMPLE 1
## TASK HISTORY
Task list: [
	{"id": "1", "start": "12:07:38", "end": "12:09:43", "content": "Play with the person", "status": "success"},
	{"id": "2", "start": "12:09:15", "end": "12:12:12", "content": "Check if there is any person in the hallway, if so take a picture of him and report the message. Go back to the room after that.", "status": "in-progress", "plan": "DEFAULT"}
]

## GUIDELINES
1. You can look at the most interesting object in the view if you don't have any other tasks.

## OBSERVATION
{
  "t": "12:10:13",
  "robot": {
    "posture": "standing"
  },
  "perception": [
    {
      "name": "chair",
      "bbox": [
		0.55,
		0.63,
		0.40,
		0.73
	  ],
      "dist": 2.82
    },
	{
	  "name": "table",
	  "bbox": [
		0.12,
		0.34,
		0.77,
		0.34
	  ],
	  "dist": 1.23
	},
	{
	  "name": "tv",
	  "bbox": [
		0.43,
		0.42,
		0.32,
		0.23
	  ],
	  "dist": 0.99
	}
  ],
  "nav": {
	"current_wp": 1,
    "waypoints": [
      {
        "id": 0,
        "label": "room"
      },
      {
        "id": 1,
        "label": "room"
      },
      {
        "id": 2,
        "label": "hallway"
      },
	  {
		"id": 3,
		"label": "hallway"
	  },
	  {
		"id": 4,
		"label": "hallway"
	  },
	  {
		"id": 7,
		"label": "hallway"
	  },
	  {
		"id": 8,
		"label": "hallway"
	  },
	  {
		"id": 12,
		"label": "hallway"
	  }
    ]
  }
}

## OUTPUT
There is only one in-progress task (2) and it only has a default plan, so I will override it with a new concrete plan. The task is to check if there is any person in the hallway, take a picture if found, report the message, and return to the room.

The robot is currently at waypoint 1, labeled "room", and needs to search for any person in the hallway. There are no people in the immediate scene description, so the robot should navigate through the waypoints labeled "hallway" to look for a person. If a person is detected, the robot must stop, take a picture, and report the message. After that, or if no person is found at all, the robot should return to its original waypoint (1).

To implement this behavior, we define:
- `targets`: a list of hallway waypoints to visit.
- `start`: the robotâ€™s current location (1).
- `index`: to track which waypoint in `targets` the robot is currently heading to.
- `next`: the next waypoint to go to, initialized to the first in `targets`.
- A state machine:
  - `GOTO_NEXT` to visit waypoints in sequence and update `next`.
  - `SEE_PERSON` as a global condition when a person is seen.
  - `RETURN_HOME` and `DONE` to wrap up the task.
- Initial state is `GOTO_NEXT`.

```json
{
	"action": "update(2)",
	"variables": {
		"targets": [2, 3, 4, 7, 8, 12],
		"start": 1,
		"index": 0,
		"next": 2
	},

	"initial_state": "GOTO_NEXT",

	"global_trans": [
		"SEE_PERSON: see any person"
	],

	"states": {
		"GOTO_NEXT": {
			"action": "go to next waypoint",
			"update": {
		        "index": "index + 1",
		        "next": "targets[index] if index < len(targets) else None"
		    },
			"trans": [
				"RETURN_HOME: next is None"
			]
		},

		"SEE_PERSON": "take a picture, then report the message -> RETURN_HOME",

		"RETURN_HOME": "go back to start -> DONE"
	}
}
```

------------
# EXAMPLE 2
## TASK HISTORY
Task list: [
	{"id": "1", "start": "12:07:38", "end": "12:09:43", "content": "Play with the person", "status": "success"},
	{"id": "2", "start": "12:10:38", "end": "None", "content": "Go to the other side of the room and find an apple and take a picture of it.", "status": "in-progress", "plan": {
		"variables": {
			"start": 1
		},

		"current_state": "SEARCH_APPLE",

		"global_trans": [
			"SEE_APPLE: see an apple"
		],

		"states": {
			"GOTO_WP2": "go to waypoint 2 -> SEARCH_APPLE",

			"SEARCH_APPLE": {
				"action": "look around for an apple",
				"trans": [
					"SEE_APPLE: see an apple",
					"RETURN_HOME: searched all directions"
				]
			},

			"SEE_APPLE": "approach and take a picture of the apple, then report the message -> RETURN_HOME",

			"RETURN_HOME": "go back to start -> DONE"
		}
	}},
	{"id": "3", "start": "12:11:15", "end": "None", "content": "Banana also works.", "status": "in-progress", "plan": "DEFAULT"}
]

## GUIDELINES
1. You can look at the most interesting object in the view if you don't have any other tasks.

## OBSERVATION
{
  "t": "12:11:23",
  "robot": {
	"posture": "standing"
  },
  "perception": [
	{
	  "name": "chair",
	  "bbox": [
		0.25,
		0.53,
		0.20,
		0.51
	  ],
	  "dist": 1.82
	},
	{
	  "name": "person",
	  "bbox": [
		0.29,
		0.52,
		0.11,
		0.22
	  ],
	  "dist": 0.62
	}
  ],
  "nav": {
	"current_wp": 2,
	"waypoints": [
	  {
		"id": 1,
		"label": "room"
	  },
	  {
		"id": 2,
		"label": "room"
	  },
	  {
		"id": 3,
		"label": "room"
	  },
	  {
		"id": 4,
		"label": "hallway"
	  },
	  {
		"id": 5,
		"label": "hallway"
	  },
	  {
		"id": 6,
		"label": "hallway"
	  }
	]
  }
}

## OUTPUT
There are two in-progress tasks (2 and 3). Task 2 has a concrete plan to find an apple, while task 3 only has a default plan. The task 3 is "Banana also works.", I'll consider it as a modification of task 2, which expands the search criteria from just "apple" to "apple or banana". Therefore, the robot should override the current task to accommodate this change. The new initial_state should be set to "SEARCH_APPLE_BANANA" to continue searching for the specified fruits.

```json
{
	"action": "stop(2);update(3)",
	"variables": {
		"start": 1
	},

	"initial_state": "SEARCH_APPLE_BANANA",

	"global_trans": [
		"SEE_APPLE: see an apple",
		"SEE_BANANA: see a banana"
	],

	"states": {
		"GOTO_WP2": "go to waypoint 2 -> SEARCH_APPLE_BANANA",

		"SEARCH_APPLE_BANANA": {
			"action": "look around for an apple or banana",
			"trans": [
				"SEE_APPLE: see an apple",
				"SEE_BANANA: see a banana",
				"RETURN_HOME: searched all directions"
			]
		},

		"SEE_APPLE": "approach and take a picture of the apple, then report the message -> RETURN_HOME",

		"SEE_BANANA": "approach and take a picture of the banana, then report the message -> RETURN_HOME",

		"RETURN_HOME": "go back to start -> DONE"
	}
}
```

------------
# EXAMPLE 3
## TASK HISTORY
Task list: [
	{"id": "1", "start": "12:07:38", "end": "12:09:43", "content": "Play with the person", "status": "success"},
	{"id": "2", "start": "12:09:15", "end": "12:12:12", "content": "Go to the other side of the room and find a chair and take a picture of it.", "status": "success"},
	{"id": "3", "start": "13:12:34", "end": "None", "content": "Play with the person for 5mins", "status": "in-progress", 
		"plan": {
			"variables": {
				"begin": "13:12:34",
			},
			"current_state": "PLAY_WITH_PERSON",
			"global_trans": [],
			"states": {
				"PLAY_WITH_PERSON": "Look at the person, wag tail or body, look at the interesting object near the person -> DONE if current time - begin > 5mins"
			}
		}
	}
]

## GUIDELINES
1. You can look at the most interesting object in the view if you don't have any other tasks.

## OBSERVATION
{
  "t": "13:15:45",
  "robot": {
	"posture": "standing"
  },
  "perception": [
	{
	  "name": "chair",
	  "bbox": [
		0.25,
		0.53,
		0.20,
		0.51
	  ],
	  "dist": 1.82
	},
	{
	  "name": "person",
	  "bbox": [
		0.29,
		0.52,
		0.11,
		0.22
	  ],
	  "dist": 0.62
	}
  ],
  "nav": {
	"current_wp": 1,
	"waypoints": [
	  {
		"id": 1,
		"label": "room"
	  },
	  {
		"id": 2,
		"label": "room"
	  },
	  {
		"id": 3,
		"label": "room"
	  },
	  {
		"id": 4,
		"label": "hallway"
	  },
	  {
		"id": 5,
		"label": "hallway"
	  },
	  {
		"id": 6,
		"label": "hallway"
	  }
	]
  }
}

## OUTPUT
There is only one in-progress task (3) and it's still ongoing. The robot should continue executing the current task without any changes.

```json
{
	"action": "continue(3)"
}
```

------------
# EXAMPLE 4
## TASK HISTORY
Task list: [
	{"id": "1", "start": "12:07:38", "end": "12:09:43", "content": "Play with the person", "status": "success"},
	{"id": "2", "start": "12:09:15", "end": "12:12:12", "content": "Go to the other side of the room and find a chair and take a picture of it.", "status": "success"},
	{"id": "3", "start": "13:12:34", "end": "None", "content": "Come and pick one.", "status": "in-progress", "plan": "DEFAULT"}
]

## GUIDELINES
1. You prefer orange over other fruits.

## OBSERVATION
{
  "t": "13:18:25",
  "robot": {
	"posture": "standing"
  },
  "perception": [
	{ "name": "person", "bbox": [0.25, 0.53, 0.20, 0.51], "dist": 1.82 },
	{ "name": "apple", "bbox": [0.10, 0.34, 0.45, 0.31], "dist": 0.58 },
	{ "name": "orange", "bbox": [0.55, 0.63, 0.40, 0.73], "dist": 0.72 }
  ],
  "nav": {
	"current_wp": 1,
	"waypoints": [
	  {
		"id": 1,
		"label": "room"
	  },
	  {
		"id": 2,
		"label": "room"
	  },
	  {
		"id": 3,
		"label": "room"
	  },
	  {
		"id": 4,
		"label": "hallway"
	  },
	  {
		"id": 5,
		"label": "hallway"
	  },
	  {
		"id": 6,
		"label": "hallway"
	  }
	]
  }
}

## OUTPUT
There is only one in-progress task (3) and it only has a default plan. The new instruction "Come and pick one." indicates that the robot should pick something. In the current observation, there are two fruits visible: an apple and an orange.
Given the guidelines that prefer orange over other fruits, the robot should pick the orange.

```json
{
	"action": "update(3)",
	"variables": {},
	"initial_state": "PICK_ORANGE",
	"global_trans": [],
	"states": {
		"PICK_ORANGE": "approach the orange and pick it up -> DONE"
	}
}
```